<!DOCTYPE html>
<html>

<head>
  <title>Sonos Volume Monitor</title>

  <style>
    body {
      margin: 0;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      background: linear-gradient(to right, #ff0000, #0000ff, #00ff00 <%=volume %>%);
      background-size: 200%;
    }

    .muted {
      background-color: black;
    }

    #volume-label {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
      font-size: 30vw;
      text-align: center;
      color: #333;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .muted #volume-label {
      color: transparent;
    }

    #volume-text {
      font-weight: bold;
      text-shadow: -8px 0 black, 0 8px black, 8px 0 black, 0 -8px black;
      color: white;
      font-size: 30vw;
      max-width: 70%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #fullscreen-button {
      position: absolute;
      bottom: 0;
      display: block;
    }

    :fullscreen #fullscreen-button {
      display: none;
    }
  </style>
</head>

<body>
  <p id="volume-label">
    <span id="volume-text">
      LOADING
    </span>
  </p>
  <br>
  <button id="fullscreen-button">Full Screen</button>



  <script src="/socket.io/socket.io.js"></script>

  <script>
    const socket = io();
    console.log("socket connected")

    // Define a flag to track whether the volume is currently being shown
    let showingVolume = false;
    let timeout
    // Define a function to update the time on the page
    function updateTime() {
      // Check if the volume is currently being shown
      if (!showingVolume) {
        // Get the current time
        const currentTime = new Date();
        // Format the time as a string in 24-hour format
        const timeString = currentTime.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });
        // Update the text on the page to show the time
        document.getElementById('volume-text').innerText = timeString;
        document.body.style.backgroundSize = "200%";

      }
    }

    // Update the time on the page every second
    setInterval(updateTime, 1000);

    // Update the background color of the body element when the volume changes
    socket.on('volumeChanged', (data) => {
      console.log("volume changed")
      // Set the showingVolume flag to true
      showingVolume = true;

      // Update the page to show the volume
      document.body.style.background = `linear-gradient(to right,  #ff0000 , #0000ff,  #00ff00 ${data.volume}%) `;
      document.body.style.backgroundSize = "200%";
      document.getElementById('volume-text').innerText = data.volume;

      // Cancel the existing timeout, if there is one
      if (timeout) {
        clearTimeout(timeout);
      }

      // Set a new timeout to update the time after 3 seconds
      timeout = setTimeout(() => {
        // Set the showingVolume flag to false
        showingVolume = false;

        // Update the time on the page
        updateTime();
      }, 3000);
    });



    // Update the page when the system is muted or unmuted
    socket.on('muted', (data) => {
      if (data.muted) {
        // Set the showingVolume flag to true
        showingVolume = true;

        // Update the page to show the word "MUTE" and change the color of the background
        document.getElementById('volume-text').innerText = 'MUTE';
        document.body.classList.add('muted');

        // Cancel the existing timeout, if there is one
        if (timeout) {
          clearTimeout(timeout);
        }

        // Set a new timeout to update the time after 3 seconds
        timeout = setTimeout(() => {
          // Set the showingVolume flag to false
          showingVolume = false;

          // Update the time on the page
          updateTime();
        }, 3000);

      } else {
        // Make a request to the /volume route to get the current volume of the Sonos system
        fetch('/volume')
          .then(response => response.json())
          .then(data => {
            // Update the page to show the volume value and change the color of the background
            document.getElementById('volume-text').innerText = data.volume;
            document.body.classList.remove('muted');
            document.body.style.background = `linear-gradient(to right,  #ff0000 , #0000ff,  #00ff00 ${data.volume}%) `;
            document.getElementById('volume-text').innerText = data.volume;
            document.body.classList.remove('muted');
            document.body.style.background = `linear-gradient(to right,  #ff0000 , #0000ff,  #00ff00 ${data.volume}%) `;
            document.body.style.backgroundSize = "200%";

            if (timeout) {
              clearTimeout(timeout);
            }

            // Set a new timeout to update the time after 3 seconds
            timeout = setTimeout(() => {
              // Set the showingVolume flag to false
              showingVolume = false;

              // Update the time on the page
              updateTime();
            }, 3000);
          });
      }
    });


    //fullscreen button
    const fullscreenButton = document.getElementById('fullscreen-button');

    fullscreenButton.addEventListener('click', () => {
      // Check if full-screen mode is supported
      if (document.fullscreenEnabled) {
        // Request full-screen mode
        document.documentElement.requestFullscreen();
      } else {
        // Full-screen mode is not supported
        console.log('Full-screen mode is not supported');
      }
    });

    document.addEventListener('fullscreenchange', () => {
      // Check if the document is in full-screen mode
      if (document.fullscreenElement) {
        // The document is in full-screen mode
        fullscreenButton.classList.add('fullscreen');
      } else {
        // The document is not in full-screen mode
        fullscreenButton.classList.remove('fullscreen');
      }
    });



  </script>
</body>